// The Computer Language Benchmarks Game
// http://benchmarksgame.alioth.debian.org
// entry: n-body
//
// Based on the C# Mono contribution by Isaac Gouy

module benchmarks.nbody;

import morfa.io.print: printf;
import morfa.math.base: sqrt;
import morfa.util.Range;
import mcl.Environment: Environment;
import mcl.Text.parsers: parseDecimalInt;


func main()
{
    // Default number of iterations, override with commandline arg
    var n = 10000; 

    var args = Environment.getCommandLineArgs();
    if (args.length > 1)
        n = parseDecimalInt(args[1]);

    var bodies = new NBodySystem;

    printf("{%d.9}\n", bodies.energy());
    for (i in range(n))
        bodies.advance(0.01);
    printf("{%d.9}\n", bodies.energy());
}

class NBodySystem
{
    var bodies: Body[];

    func new()
    {
        bodies = [ Body.Sun, Body.Jupiter, Body.Saturn, 
                   Body.Uranus, Body.Neptune ];

        var px = 0.0;
        var py = 0.0;
        var pz = 0.0;
        for (b in bodies)
        {
            px += b.vx * b.mass;
            py += b.vy * b.mass;
            pz += b.vz * b.mass;
        }
        bodies[0].offsetMomentum(px,py,pz);
    }

    func advance(dt: float): void
    {
        var dx: float;
        var dy: float;
        var dz: float;
        var distance: float;
        var mag: float;

        for (i in range(bodies.length))
        {
            var bodyi = bodies[i];
            for (j in range(i+1, bodies.length))
            {
                var bodyj = bodies[j];
                dx = bodyi.x - bodyj.x;
                dy = bodyi.y - bodyj.y;
                dz = bodyi.z - bodyj.z;

                distance = sqrt(dx*dx + dy*dy + dz*dz);
                mag = dt / (distance * distance * distance);

                bodyi.vx -= dx * bodyj.mass * mag;
                bodyi.vy -= dy * bodyj.mass * mag;
                bodyi.vz -= dz * bodyj.mass * mag;

                bodyj.vx += dx * bodyi.mass * mag;
                bodyj.vy += dy * bodyi.mass * mag;
                bodyj.vz += dz * bodyi.mass * mag;
            }
        }

        for (b in bodies)
        {
            b.x += dt * b.vx;
            b.y += dt * b.vy;
            b.z += dt * b.vz;
        }
    }

    func energy(): float
    {
       var dx: float;
       var dy: float;
       var dz: float;
       var distance: float;

       var e = 0.0;

       for (i in range(bodies.length))
       {
           var bodyi = bodies[i];

           e += 0.5 * bodyi.mass *
                ( bodyi.vx * bodyi.vx
                + bodyi.vy * bodyi.vy
                + bodyi.vz * bodyi.vz );

           for (j in range(i+1, bodies.length))
           {
               var bodyj = bodies[j];

               dx = bodyi.x - bodyj.x;
               dy = bodyi.y - bodyj.y;
               dz = bodyi.z - bodyj.z;

               distance = sqrt(dx*dx + dy*dy + dz*dz);
               e -= (bodyi.mass * bodyj.mass) / distance;
           }
       }
       return e;
    }
}


class Body
{
    const PI = 3.141592653589793;
    const SOLAR_MASS = 4 * PI * PI;
    const DAYS_PER_YEAR = 365.24;

    var x: float;
    var y: float;
    var z: float;
    var vx: float;
    var vy: float;
    var vz: float;
    var mass: float;

    static property Jupiter(): Body
    {
        var p = new Body;
        p.x = 4.84143144246472090e+00;
        p.y = -1.16032004402742839e+00;
        p.z = -1.03622044471123109e-01;
        p.vx = 1.66007664274403694e-03 * DAYS_PER_YEAR;
        p.vy = 7.69901118419740425e-03 * DAYS_PER_YEAR;
        p.vz = -6.90460016972063023e-05 * DAYS_PER_YEAR;
        p.mass = 9.54791938424326609e-04 * SOLAR_MASS;
        return p;
    }

    static property Saturn(): Body
    {
        var p = new Body;
        p.x = 8.34336671824457987e+00;
        p.y = 4.12479856412430479e+00;
        p.z = -4.03523417114321381e-01;
        p.vx = -2.76742510726862411e-03 * DAYS_PER_YEAR;
        p.vy = 4.99852801234917238e-03 * DAYS_PER_YEAR;
        p.vz = 2.30417297573763929e-05 * DAYS_PER_YEAR;
        p.mass = 2.85885980666130812e-04 * SOLAR_MASS;
        return p;
    }

    static property Uranus(): Body
    {
        var p = new Body;
        p.x = 1.28943695621391310e+01;
        p.y = -1.51111514016986312e+01;
        p.z = -2.23307578892655734e-01;
        p.vx = 2.96460137564761618e-03 * DAYS_PER_YEAR;
        p.vy = 2.37847173959480950e-03 * DAYS_PER_YEAR;
        p.vz = -2.96589568540237556e-05 * DAYS_PER_YEAR;
        p.mass = 4.36624404335156298e-05 * SOLAR_MASS;
        return p;
    }

    static property Neptune(): Body
    {
        var p = new Body;
        p.x = 1.53796971148509165e+01;
        p.y = -2.59193146099879641e+01;
        p.z = 1.79258772950371181e-01;
        p.vx = 2.68067772490389322e-03 * DAYS_PER_YEAR;
        p.vy = 1.62824170038242295e-03 * DAYS_PER_YEAR;
        p.vz = -9.51592254519715870e-05 * DAYS_PER_YEAR;
        p.mass = 5.15138902046611451e-05 * SOLAR_MASS;
        return p;
    }

    static property Sun(): Body
    {
        var p = new Body;
        p.x = 0;
        p.y = 0;
        p.z = 0;
        p.vx = 0;
        p.vy = 0;
        p.vz = 0;
        p.mass = SOLAR_MASS;
        return p;
    }

    func offsetMomentum(px: float, py: float, pz: float): void
    {
        vx = -px / SOLAR_MASS;
        vy = -py / SOLAR_MASS;
        vz = -pz / SOLAR_MASS;
    }
}
